{
  "compilerOptions": {
    // 访问 https://aka.ms/tsconfig 了解更多关于此文件的信息

    // 项目
    // "incremental": true,                              // 保存 .tsbuildinfo 文件以允许项目的增量编译。
    // "composite": true,                                // 启用约束以允许 TypeScript 项目与项目引用一起使用。
    // "tsBuildInfoFile": "./.tsbuildinfo",              // 指定 .tsbuildinfo 增量编译文件的路径。
    // "disableSourceOfProjectReferenceRedirect": true,  // 禁用在引用复合项目时优先使用源文件而不是声明文件。
    // "disableSolutionSearching": true,                 // 在编辑时选择退出多项目引用检查。
    // "disableReferencedProjectLoad": true,             // 减少 TypeScript 自动加载的项目数量。

    // 语言和环境
    "target": "ES6",                                  // 设置发出 JavaScript 的 JavaScript 语言版本，并包含兼容的库声明。
    // "lib": [],                                        // 指定一组描述目标运行时环境的捆绑库声明文件。
    // "jsx": "preserve",                                // 指定生成的 JSX 代码。
    "experimentalDecorators": true,                   // 启用对遗留实验装饰器的实验支持。
    // "emitDecoratorMetadata": true,                    // 为源文件中的装饰声明发出设计类型元数据。
    // "jsxFactory": "",                                 // 指定在针对 React JSX 发出时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。
    // "jsxFragmentFactory": "",                         // 指定在针对 React JSX 发出时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。
    // "jsxImportSource": "",                            // 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符。
    // "reactNamespace": "",                             // 指定为 'createElement' 调用的对象。这仅适用于针对 'react' JSX 发出的情况。
    // "noLib": true,                                    // 禁用包含任何库文件，包括默认的 lib.d.ts。
    // "useDefineForClassFields": true,                  // 发出符合 ECMAScript 标准的类字段。
    // "moduleDetection": "auto",                        // 控制用于检测模块格式 JS 文件的方法。

    // 模块
    "module": "commonjs",                                // 指定生成的模块代码。
    // "rootDir": "./",                                  // 指定源文件中的根文件夹。
    // "moduleResolution": "node10",                     // 指定 TypeScript 如何从给定的模块说明符查找文件。
    // "baseUrl": "./",                                  // 指定解析非相对模块名称的基本目录。
    // "paths": {},                                      // 指定一组将导入重新映射到其他查找位置的条目。
    // "rootDirs": [],                                   // 允许在解析模块时将多个文件夹视为一个。
    // "typeRoots": [],                                  // 指定多个文件夹，类似于 './node_modules/@types'。
    // "types": [],                                      // 指定要包含的类型包名称，而无需在源文件中引用。
    // "allowUmdGlobalAccess": true,                     // 允许从模块访问 UMD 全局变量。
    // "moduleSuffixes": [],                             // 在解析模块时搜索的文件名后缀列表。
    // "allowImportingTsExtensions": true,               // 允许导入包含 TypeScript 文件扩展名。需要设置 '--moduleResolution bundler' 和 '--noEmit' 或 '--emitDeclarationOnly'。
    // "resolvePackageJsonExports": true,                // 在解析包导入时使用 package.json 的 'exports' 字段。
    // "resolvePackageJsonImports": true,                // 在解析导入时使用 package.json 的 'imports' 字段。
    // "customConditions": [],                           // 在解析导入时，除了解析器特定的默认值外，还设置的条件。
    // "noUncheckedSideEffectImports": true,             // 检查副作用导入。
    // "resolveJsonModule": true,                        // 启用导入 .json 文件。
    // "allowArbitraryExtensions": true,                 // 启用导入任何扩展名的文件，前提是存在声明文件。
    // "noResolve": true,                                // 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应添加到项目中的文件数量。

    // JavaScript 支持
    // "allowJs": true,                                  // 允许 JavaScript 文件成为程序的一部分。使用 'checkJS' 选项从这些文件中获取错误。
    // "checkJs": true,                                  // 启用类型检查 JavaScript 文件中的错误报告。
    // "maxNodeModuleJsDepth": 1,                        // 指定用于检查 'node_modules' 中的 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs'。

    // 发出
    // "declaration": true,                              // 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。
    // "declarationMap": true,                           // 为 d.ts 文件创建源映射。
    // "emitDeclarationOnly": true,                      // 仅输出 d.ts 文件，而不输出 JavaScript 文件。
    // "sourceMap": true,                                // 为发出的 JavaScript 文件创建源映射文件。
    // "inlineSourceMap": true,                          // 在发出的 JavaScript 中包含源映射文件。
    // "noEmit": true,                                   // 禁用从编译中发出文件。
    // "outFile": "./",                                  // 指定将所有输出捆绑到一个 JavaScript 文件中的文件。如果 'declaration' 为 true，还指定将所有 .d.ts 输出捆绑到一个文件中的文件。
    // "outDir": "./",                                   // 指定所有发出文件的输出文件夹。
    // "removeComments": true,                           // 禁用发出注释。
    // "importHelpers": true,                            // 允许从 tslib 导入一次性帮助函数，而不是每个文件都包含它们。
    // "downlevelIteration": true,                       // 为迭代发出更符合标准但冗长且性能较低的 JavaScript。
    // "sourceRoot": "",                                 // 指定调试器查找参考源代码的根路径。
    // "mapRoot": "",                                    // 指定调试器应查找映射文件的位置，而不是生成的位置。
    // "inlineSources": true,                            // 在发出的 JavaScript 中的源映射中包含源代码。
    // "emitBOM": true,                                  // 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。
    // "newLine": "crlf",                                // 设置发出文件的换行符。
    // "stripInternal": true,                            // 禁用发出在 JSDoc 注释中带有 '@internal' 的声明。
    // "noEmitHelpers": true,                            // 禁用在编译输出中生成自定义帮助函数，如 '__extends'。
    // "noEmitOnError": true,                            // 如果报告任何类型检查错误，则禁用发出文件。
    // "preserveConstEnums": true,                       // 禁用在生成的代码中删除 'const enum' 声明。
    // "declarationDir": "./",                           // 指定生成的声明文件的输出目录。

    // 互操作约束
    // "isolatedModules": true,                          // 确保每个文件都可以安全地转译，而无需依赖其他导入。
    // "verbatimModuleSyntax": true,                     // 不转换或省略任何未标记为仅类型的导入或导出，确保它们以输出文件的格式编写，基于 'module' 设置。
    // "isolatedDeclarations": true,                     // 要求对导出进行足够的注释，以便其他工具可以轻松生成声明文件。
    // "allowSyntheticDefaultImports": true,             // 允许在模块没有默认导出时使用 'import x from y'。
    "esModuleInterop": true,                             // 发出额外的 JavaScript 以简化对 CommonJS 模块的导入支持。这启用 'allowSyntheticDefaultImports' 以实现类型兼容性。
    // "preserveSymlinks": true,                         // 禁用将符号链接解析为其真实路径。这与节点中的相同标志相关。

    "forceConsistentCasingInFileNames": true,            // 确保导入中的大小写正确。

    // 类型检查
    "strict": true,                                      // 启用所有严格的类型检查选项。
    // "noImplicitAny": true,                            // 启用对具有隐含 'any' 类型的表达式和声明的错误报告。
    // "strictNullChecks": true,                         // 在类型检查时，考虑 'null' 和 'undefined'。
    // "strictFunctionTypes": true,                      // 在分配函数时，检查以确保参数和返回值是子类型兼容的。
    // "strictBindCallApply": true,                      // 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。
    // "strictPropertyInitialization": true,             // 检查在构造函数中声明但未设置的类属性。
    // "strictBuiltinIteratorReturn": true,              // 内置迭代器实例化时的 'TReturn' 类型为 'undefined' 而不是 'any'。
    // "noImplicitThis": true,                           // 启用当 'this' 被赋予 'any' 类型时的错误报告。
    // "useUnknownInCatchVariables": true,               // 默认将 catch 子句变量设为 'unknown' 而不是 'any'。
    // "alwaysStrict": true,                             // 确保始终发出 'use strict'。
    // "noUnusedLocals": true,                           // 启用当本地变量未被读取时的错误报告。
    // "noUnusedParameters": true,                       // 当函数参数未被读取时引发错误。
    // "exactOptionalPropertyTypes": true,               // 按照编写的方式解释可选属性类型，而不是添加 'undefined'。
    // "noImplicitReturns": true,                        // 启用对未显式返回的代码路径的错误报告。
    // "noFallthroughCasesInSwitch": true,               // 启用对 switch 语句中贯穿情况的错误报告。
    // "noUncheckedIndexedAccess": true,                 // 在使用索引访问时将 'undefined' 添加到类型中。
    // "noImplicitOverride": true,                       // 确保在派生类中重写成员时使用 override 修饰符。
    // "noPropertyAccessFromIndexSignature": true,       // 强制使用索引类型声明的键的索引访问器。
    // "allowUnusedLabels": true,                        // 禁用对未使用标签的错误报告。
    // "allowUnreachableCode": true,                     // 禁用对不可达代码的错误报告。

    // 完整性
    // "skipDefaultLibCheck": true,                      
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
